@inherits AppComponentBase

@if (IsOpen)
{
    <div class="search-modal" @onclick="HandleBackgroundClick">
        <div class="search-modal-content" @onclick:stopPropagation>
            <input id="modalSearchInput"
                   type="text"
                   class="modal-search-input"
                   placeholder="@TranslateService.Translate("SEARCH")"
                   @bind="SearchText"
                   @bind:event="oninput" />

            <div class="search-modal-body">
                @if (GroupedResults.Count == 0 && !string.IsNullOrWhiteSpace(SearchText))
                {
                    <div>@TranslateService.Translate("NO_RESULTS_FOUND")</div>
                }
                else
                {
                    @foreach (var group in GroupedResults)
                    {
                        <div class="search-category">
                            <h4>@group.Key</h4>
                            @foreach (var item in group.Value)
                            {
                                <div class="search-result" @onclick="@(() => NavigateTo(item.Path))">
                                    @item.Title
                                </div>
                            }
                        </div>
                    }
                }
            </div>

        </div>
    </div>
}


@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public string SearchText { get; set; }
    [Parameter] public EventCallback<string> SearchTextChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsOpen)
        {
            await JS.InvokeVoidAsync("focusElementById", "modalSearchInput");
        }

        if (firstRender)
        {
            await JS.InvokeVoidAsync("registerEscapeClose", DotNetObjectReference.Create(this));
        }
    }

    private async Task HandleBackgroundClick()
    {
        await IsOpenChanged.InvokeAsync(false);
    }

    private Dictionary<string, List<SearchResultItem>> GroupedResults =>
    string.IsNullOrWhiteSpace(SearchText)
        ? new()
        : SearchData.GetSearchItems(TranslateService)
            .Where(item => item.Title.Contains(SearchText, StringComparison.OrdinalIgnoreCase))
            .GroupBy(item => item.Category)
            .ToDictionary(g => g.Key, g => g.ToList());

    private void NavigateTo(string path)
    {
        NavigationManager.NavigateTo(path);
        IsOpenChanged.InvokeAsync(false);
    }

    [JSInvokable]
    public async Task CloseModal()
    {
        await IsOpenChanged.InvokeAsync(false);
    }

    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] IJSRuntime JS { get; set; }
}
